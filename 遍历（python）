"""
树的遍历
六种方法：递归，非递归
"""
#前序遍历
```python
class TreeNode:
      def _init_(self,x):
          self.val=x
          self.left=None
          self.right=None

def pre_order(root):
    print(root.val)
    pre_order(root.left)
    pre_order(root.right)
    
   
def pre_order(root):
      if not root:return 
      res,s,p=[],[],root
      while p or s:
            while p:
                  res.append(p.val)
                  s.append(p)
                  p=p.left
            if s:
                  p=s.pop()
                  p=p.right
     return res 
```
    
   #中序遍历
   
class TreeNode:
      def _init_(self,x):
          self.val=x
          self.left=None
          self.right=None
          
def mid_order(root):
         mid_order(root.left)
         print(root.val)
         mid_order(root.right)
         
def mid_order(root):
      if not root: return 
      res,s,p=[],[],root
      while s or p:
            while p:
                  s.append(p)
                  p=p.left
            if s: 
                  p=s.pop()
                  res.append(p.val)
                  p=p.right
      return res

#后序遍历

class TreeNode:
      def _init_(self,x):
          self.val=x
          self.left=None
          self.right=None
      
      
def post_order(root):
      post_order(root.left)
      post_order(root.right)
      print(root.val)
      
def post_order(root):
      if not root:return
      cur,pre,res,s=root,None,[],[]
      while cur or s:
            while cur:
                  s.append(cur)
                  cur=cur.left
            cur=s.pop()
            if not cur.right or cur.right==pre:
                  res.append(cur.val)
                  pre=cur
                  cur=None
            else:
                  s.append(cur)
                  cur=cur.right
     return res
            
      
      
      

          
 
  
