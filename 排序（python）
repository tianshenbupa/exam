冒泡排序

```
def sort(arr):
  for i in range(1,len(arr)):
    for j in range(0,len(arr)-i):
        if arr[j]>arr[j+1]:
            arr[j],arr[j+1]= arr[j+1],arr[j]
  return arr 
```

选择排序
```
def sort(arr):
    for i in range(len(arr)):
        min_index=i
        for j in range(i,len(arr)):
            if arr[j]<arr[min_index]:
                min_index=j
        arr[j],arr[min_index]=arr[min_index],arr[j]
        
     return arr   

```
插入排序

```
def insertionSort(arr):
    for i in range(len(arr)):
        pre = i-1
        cur = arr[i]
        while pre >= 0 and arr[pre] > cur:
            arr[pre+1] = arr[pre]
            pre-=1
        arr[pre+1] = cur
    return arr
          
```

希尔排序
```
def shellSort(arr):
    import math
    gap=1
    while(gap < len(arr)/3):
        gap = gap*3+1
    while gap > 0:
        for i in range(gap,len(arr)):
            temp = arr[i]
            j = i-gap
            while j >=0 and arr[j] > temp:
                arr[j+gap]=arr[j]
                j-=gap
            arr[j+gap] = temp
        gap = math.floor(gap/3)
    return arr
}
```

归并排序

```
def mergeSort(arr):
    import math
    if(len(arr)<2):
        return arr
    middle = math.floor(len(arr)/2)
    left, right = arr[0:middle], arr[middle:]
    return merge(mergeSort(left), mergeSort(right))

def merge(left,right):
    result = []
    while left and right:
        if left[0] <= right[0]:
            result.append(left.pop(0));
        else:
            result.append(right.pop(0));
    while left:
        result.append(left.pop(0));
    while right:
        result.append(right.pop(0));
    return result

```

堆排序
```
def buildMaxHeap(arr):
    import math
    for i in range(math.floor(len(arr)/2),-1,-1):
        heapify(arr,i)

def heapify(arr, i):
    left = 2*i+1
    right = 2*i+2
    largest = i
    if left < arrLen and arr[left] > arr[largest]:
        largest = left
    if right < arrLen and arr[right] > arr[largest]:
        largest = right

    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, largest)



def heapSort(arr):
    global arrLen
    arrLen = len(arr)
    buildMaxHeap(arr)
    for i in range(len(arr)-1,0,-1):
        arr[i], arr[0] = arr[0], arr[i]
        arrLen -=1
        heapify(arr, 0)
    return arr


```
快排
```
def partition(arr,left,right): 
    i = ( left-1 )   # 最小元素索引
    pivot = arr[right]     
  
    for j in range(left , right):   
        # 当前元素小于或等于 pivot 
        if   arr[j] <= pivot: 
        
            i = i+1 
            arr[i],arr[j] = arr[j],arr[i] 
  
    arr[i+1],arr[right] = arr[right],arr[i+1] 
    return ( i+1 ) 
  
 
# arr[] --> 排序数组
# low  --> 起始索引
# high  --> 结束索引
  
# 快速排序函数
def quickSort(arr,left,right): 
    if left < right: 
  
        pi = partition(arr,left,right) 
  
        quickSort(arr, left, pi-1) 
        quickSort(arr, pi+1, right) 
  

```
